<UserControl x:Class="EditableListLib.EditableList"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:EditableListLib"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             
             xmlns:cmd="clr-namespace:EditableListLib.Commands"
             xmlns:reskeys="clr-namespace:EditableListLib.Themes"
             >
    <Grid>
        <ListBox Name="lb"
                 IsSynchronizedWithCurrentItem="True"
                 ItemsSource="{Binding EditableListems, RelativeSource={RelativeSource AncestorType=local:EditableList},Mode=OneWay,UpdateSourceTrigger=PropertyChanged}" 
                 VerticalAlignment="{Binding VerticalAlignment, RelativeSource={RelativeSource AncestorType=local:EditableList},Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"
                 HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource AncestorType=local:EditableList},Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"
                 MinWidth="{Binding MinWidth, RelativeSource={RelativeSource AncestorType=local:EditableList},Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"
                 MinHeight="{Binding MinHeight, RelativeSource={RelativeSource AncestorType=local:EditableList},Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"
                 ItemTemplateSelector="{Binding ItemTemplateSelector, RelativeSource={RelativeSource AncestorType=local:EditableList},Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"
                 SelectedItem="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType=local:EditableList},Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
             >
            <ListBox.ItemContainerStyle>
                <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                    <EventSetter Event="Control.MouseDoubleClick" Handler="ItemDoubleClick" />
                    <!--Setter Property="Background" Value="#FF3B0031" / -->
                    <!--Setter Property="FocusVisualStyle" Value="{x:Null}" /-->
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="VerticalAlignment" Value="Stretch" />
                    <Setter Property="VerticalContentAlignment" Value="Stretch" />
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="Margin" Value="0" />
                    <Setter Property="Padding" Value="0" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Grid Margin="-3,0"
                                      Width="{Binding Path=ActualWidth,RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"
                                      >
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Border x:Name="ContentBorderHost"
                                            BorderBrush="Transparent"
                                            BorderThickness="1"
                                            Margin="0"
                                            >
                                        <ContentPresenter
                                            x:Name="ContentHost" 
                                            Margin="0"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                    </Border>

                                    <Separator Grid.Row="1" >
                                        <Separator.Style>
                                            <Style TargetType="{x:Type Separator}">
                                                <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ItemSeperatorBackgroundBrushKey}}"/>
                                                <Setter Property="Margin" Value="0,2,0,2"/>
                                                <Setter Property="Focusable" Value="false"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type Separator}">
                                                            <Border BorderBrush="{TemplateBinding BorderBrush}" 
                                                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                                                    Background="{TemplateBinding Background}" 
                                                                    Height="1" 
                                                                    SnapsToDevicePixels="true"/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Separator.Style>
                                    </Separator>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="Selector.IsSelected" Value="True"/>
                                            <Condition Property="IsFocused" Value="True"/>
                                        </MultiTrigger.Conditions>
                                        <MultiTrigger.Setters>
                                            <Setter TargetName="ContentBorderHost"
                                                    Property="BorderBrush"
                                                    Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlAccentBrushKey}}"/>
                                            <Setter TargetName="ContentBorderHost"
                                                    Property="Background"
                                                    Value="{DynamicResource {x:Static reskeys:ResourceKeys.ItemSelectedBackgroundBrushKey}}"/>
                                        </MultiTrigger.Setters>
                                    </MultiTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="Selector.IsSelected" Value="True"/>
                                            <Condition Property="IsFocused" Value="False"/>
                                        </MultiTrigger.Conditions>
                                        <MultiTrigger.Setters>
                                            <Setter TargetName="ContentBorderHost"
                                                    Property="BorderBrush"
                                                    Value="{DynamicResource {x:Static reskeys:ResourceKeys.ItemSelectedNotFocusedBorderBrushKey}}"/>
                                            <Setter TargetName="ContentBorderHost"
                                                    Property="Background"
                                                    Value="{DynamicResource {x:Static reskeys:ResourceKeys.ItemSelectedNotFocusedBackgroundBrushKey}}"/>
                                        </MultiTrigger.Setters>
                                    </MultiTrigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="ContentBorderHost"
                                                    Property="BorderBrush"
                                                    Value="{DynamicResource {x:Static reskeys:ResourceKeys.ItemMouseOverBorderBrushKey}}"/>
                                        <Setter TargetName="ContentBorderHost"
                                                    Property="Background"
                                                    Value="{DynamicResource {x:Static reskeys:ResourceKeys.ItemMouseOverBackgroundBrushKey}}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ListBox.ItemContainerStyle>
            <ListBox.ItemsPanel>
                <!-- Align items in list in vertical order (see orientation on StackPanel)-->
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Vertical" />
                </ItemsPanelTemplate>
            </ListBox.ItemsPanel>
            <ListBox.InputBindings>
                <!-- Bind Keyboard shortcuts to commands -->
                <KeyBinding Command="cmd:TransactionCommands.Edit" Key="F2" />
                <KeyBinding Command="cmd:TransactionCommands.Commit" Key="Enter" />
                <KeyBinding Command="cmd:TransactionCommands.Cancel" Key="Esc"/>
            </ListBox.InputBindings>
            <ListBox.CommandBindings>
                <!-- Bind Commands to methods executed in the control -->
                <CommandBinding Command="cmd:TransactionCommands.Edit" Executed="EditChanges" />
                <CommandBinding Command="cmd:TransactionCommands.Commit" Executed="CommitChanges" />
                <CommandBinding Command="cmd:TransactionCommands.Cancel" Executed="CancelChanges" />
            </ListBox.CommandBindings>
        </ListBox>
    </Grid>
</UserControl>
